/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.magonono.wandapi;

import com.magonono.wandapi.controller.WandApiController;
import com.magonono.wandapi.log.LogManager;
import com.magonono.wandapi.view.Beautifier;
import javax.swing.text.*;
import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.*;
import java.awt.event.*;
import org.netbeans.lib.awtextra.*;
import org.springframework.boot.WebApplicationType;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;


/**
 * Created for the WandApi project.
 *
 * @author Cesar "Aran" Pasillas
 */
@SpringBootApplication
public class WandApiFrame extends JFrame {


    private WandApiController wandApiController;
    
    private transient LogManager<WandApiFrame> log;

    private DefaultListModel<String> historyListModel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel Background;
    private JPanel Historial;
    private JTextPane console;
    private JLabel historyLabel;
    private JList<String> historyList;
    private JScrollPane historyScrollPane;
    private JSeparator historySeparator;
    private JComboBox<String> httpMethodsComboBox;
    private JButton jButton1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JToggleButton jToggleButton1;
    private JPanel main;
    private JLabel requestLabel;
    private JLabel requestLabel1;
    private JLabel requestLabel2;
    private JTextPane requestTextPane;
    private JLabel responseCodeLabel;
    private JTextPane responseTextPane;
    private JButton sendButton;
    private JLabel statusCodeLabel;
    private JTextField urlTextInput;
    // End of variables declaration//GEN-END:variables

    public WandApiFrame(WandApiController wandApiController) {
        this.wandApiController = wandApiController;
        loadHistoryList();
        initComponents();
        log = new LogManager("WandApi");
    }

    /**
     * Creates new form WandApiFrame
     */
    public WandApiFrame() {
        loadHistoryList();
        initComponents();
        log = new LogManager("WandApi");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        Background = new JPanel();
        Historial = new JPanel();
        historyLabel = new JLabel();
        historyScrollPane = new JScrollPane();
        historyList = new JList<>();
        historySeparator = new JSeparator();
        jButton1 = new JButton();
        main = new JPanel();
        httpMethodsComboBox = new JComboBox<>();
        urlTextInput = new JTextField();
        sendButton = new JButton();
        jScrollPane2 = new JScrollPane();
        requestTextPane = new JTextPane();
        statusCodeLabel = new JLabel();
        responseCodeLabel = new JLabel();
        jScrollPane3 = new JScrollPane();
        responseTextPane = new JTextPane();
        jToggleButton1 = new JToggleButton();
        jScrollPane1 = new JScrollPane();
        console = new JTextPane();
        requestLabel = new JLabel();
        requestLabel1 = new JLabel();
        requestLabel2 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Background.setBackground(new Color(255, 255, 255));
        Background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Historial.setBackground(new Color(255, 255, 255));

        historyLabel.setFont(new Font("Helvetica Neue", 1, 18)); // NOI18N
        historyLabel.setForeground(new Color(102, 102, 255));
        historyLabel.setText("History");

        historyList.setBackground(new Color(102, 102, 255));
        historyList.setForeground(new Color(255, 255, 255));
        historyList.setModel(historyListModel);
        historyScrollPane.setViewportView(historyList);

        historySeparator.setBackground(new Color(204, 204, 255));
        historySeparator.setForeground(new Color(204, 204, 255));

        jButton1.setBackground(new Color(102, 102, 255));
        jButton1.setFont(new Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton1.setForeground(new Color(255, 255, 255));
        jButton1.setText("Clear History");
        jButton1.addActionListener(this::jButton1ActionPerformed);

        GroupLayout historialLayout = new GroupLayout(Historial);
        Historial.setLayout(historialLayout);
        historialLayout.setHorizontalGroup(
            historialLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(historialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historialLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(historySeparator)
                    .addGroup(historialLayout.createSequentialGroup()
                        .addGroup(historialLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(historialLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1)
                                .addComponent(historyScrollPane, GroupLayout.PREFERRED_SIZE, 332, GroupLayout.PREFERRED_SIZE))
                            .addComponent(historyLabel, GroupLayout.PREFERRED_SIZE, 319, GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        historialLayout.setVerticalGroup(
            historialLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(historialLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(historyLabel, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historySeparator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyScrollPane, GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(12, 12, 12))
        );

        Background.add(Historial, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 340, 740));

        main.setBackground(new Color(204, 204, 255));
        main.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        httpMethodsComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "GET", "POST", "DELETE", "PUT", "PATCH" }));
        httpMethodsComboBox.setToolTipText("Http Method");
        httpMethodsComboBox.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        httpMethodsComboBox.addActionListener(this::httpMethodsComboBoxActionPerformed);
        main.add(httpMethodsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 30));

        urlTextInput.setText("https://api.thecatapi.com/v1/images/search");
        urlTextInput.setToolTipText("");
        main.add(urlTextInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 520, 30));

        sendButton.setBackground(new Color(102, 102, 255));
        sendButton.setForeground(new Color(255, 255, 255));
        sendButton.setText("Send");
        sendButton.setToolTipText("Button to send the request");
        sendButton.addActionListener(this::sendButtonActionPerformed);
        main.add(sendButton, new AbsoluteConstraints(610, 40, 90, 30));

        jScrollPane2.setViewportView(requestTextPane);

        main.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 690, 240));

        statusCodeLabel.setText("Status Code:");
        main.add(statusCodeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, -1, -1));

        responseCodeLabel.setForeground(new Color(0, 153, 51));
        responseCodeLabel.setText("200");
        main.add(responseCodeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, -1, -1));

        responseTextPane.setEditable(false);
        responseTextPane.setBackground(new Color(255, 255, 255));


        // Create key and value styles
        Style keyStyle = responseTextPane.addStyle("KeyStyle", null);
        StyleConstants.setForeground(keyStyle, Color.RED);  // Keys in red

        Style valueStyle = responseTextPane.addStyle("ValueStyle", null);
        StyleConstants.setForeground(valueStyle, Color.GREEN);
        jScrollPane3.setViewportView(responseTextPane);

        main.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 690, 220));

        jToggleButton1.setText("Activate Beautify");
        jToggleButton1.setToolTipText("Activates the JSON Beautification");
        main.add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, -1, -1));

        console.setEditable(false);
        console.setBackground(new Color(255, 255, 255));
        jScrollPane1.setViewportView(console);

        main.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 630, 690, 100));

        requestLabel.setText("Output:");
        main.add(requestLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, -1, -1));

        requestLabel1.setText("Request:");
        main.add(requestLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        requestLabel2.setText("Response:");
        main.add(requestLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        Background.add(main, new org.netbeans.lib.awtextra.AbsoluteConstraints(347, 6, 720, 750));

        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        Beautifier beautifier = new Beautifier(responseTextPane);

        System.out.println(urlTextInput.getText());
        String url = urlTextInput.getText();
        String httpMethod = (String) httpMethodsComboBox.getSelectedItem();

        StyledDocument consoleStyle = console.getStyledDocument();

        Style consoleTextStyle = console.addStyle("consoleTextStyle", null);
        try {
            String json = wandApiController.sendRequest(urlTextInput.getText(),
            (String) httpMethodsComboBox.getSelectedItem());

        StyleConstants.setForeground(consoleTextStyle, Color.BLACK);

            consoleStyle.insertString(consoleStyle.getLength(), log.logInfo(" " +httpMethod +": " + url) +"\n", consoleTextStyle);
        } catch (BadLocationException ex) {
            Logger.getLogger(WandApiFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch(NullPointerException npx){
            try{
                consoleStyle.insertString(consoleStyle.getLength(), log.logInfo(" " +npx.getMessage()) +"\n", consoleTextStyle);
                Logger.getLogger(WandApiFrame.class.getName()).log(Level.SEVERE, null, npx);
            } catch (BadLocationException ex) {
                Logger.getLogger(WandApiFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        log.logInfo("GET: " + url);

        responseTextPane.setText(""); //Clear before send any response.

        responseTextPane.setText(wandApiController.sendApiRequest(urlTextInput.getText(), httpMethod));
        
        //send to the historial
        //historyList.getSelectedValue()
        
        historyListModel.addElement(httpMethod + " " + url);
        //lstHistoryList.(httpMethod + " " + url);
    }//GEN-LAST:event_sendButtonActionPerformed

    private void httpMethodsComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_httpMethodsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_httpMethodsComboBoxActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WandApiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WandApiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WandApiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WandApiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        var ctx = new SpringApplicationBuilder(WandApiFrame.class)
                .headless(false).web(WebApplicationType.NONE).run(args);

        WandApiController controller = ctx.getBean(WandApiController.class);

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WandApiFrame(controller).setVisible(true);
            }
        });
    }



    private void loadHistoryList() {
        
        historyListModel = new DefaultListModel<>();
        
    }
}
